create or alter view vFunciones
as
Select convert(date, F.FECHA) as FECHA,
			 P.COD_PELICULA, P.NOMBRE as Pelicula, P.PRODUCTORA, P.SUBTITULADA,
			 I.NOMBRE Idioma,
			 CI.NOMBRE INCA,
			 S.NOMBRE as Sala ,S.CANTIDAD_BUTACAS  as 'Cantidad Butacas',
			 G.NOMBRE Genero,
			 G.COD_GENERO,
			 S.COD_SALA,
			 I.COD_IDIOMA,
			 F.COD_FUNCION,
			 Ci.COD_CLASIFICACION_INCA
from funciones F
Join Peliculas P on p.COD_PELICULA = f.COD_PELICULA
join CLASIFICACIONES_INCA CI on CI.COD_CLASIFICACION_INCA = p.COD_CLASIFICACION_INCA
join IDIOMAS I on I.COD_IDIOMA = p.COD_IDIOMA
join Generos G On G.COD_GENERO = P.COD_GENERO
Join Salas S on s.COD_SALA = f.COD_SALA;
********************************************************************************************
create or alter procedure prBorrarFuncion
(
	@pIDFuncion int
)
as
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION 
 
			 Delete From TICKETS 
			 where COD_FUNCION = @pIDFuncion;

			 Delete from RESERVAS 
			 where COD_FUNCION = @pIDFuncion;


			 Delete From Funciones 
			 where COD_FUNCION = @pIDFuncion;

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		if @@TRANCOUNT = 0
			Throw
	END CATCH
END;
********************************************************************************************
create or alter procedure spNuevaPelicula
(
	@Nombre varchar(50),
	@Sinopsis varchar(200),
	@Productora varchar(50),
	@Clasificacion int,
	@Idioma int,
	@Subtitulada int,
	@IdGenero int
)
as 
BEGIN
	BEGIN TRY
			BEGIN TRANSACTION 
				INSERT INTO PELICULAS (Nombre,Sinopsis,PRODUCTORA,COD_CLASIFICACION_INCA,COD_IDIOMA,Subtitulada, cod_genero)
						VALUES (@Nombre,
								@Sinopsis,
								@Productora,
								@Clasificacion,
								@Idioma,
								@Subtitulada,
								@IdGenero
							   );
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF (@@TRANCOUNT = 0)
			SELECT 'Error Grabando Pelicula';
	END CATCH
END;
********************************************************************************************
create or alter procedure spNuevaFuncion 
(
	@IDPelicula int,
	@IDSala int
)
as
BEGIN
	BEGIN TRY
			BEGIN TRANSACTION 
				INSERT INTO FUNCIONES ( COD_PELICULA, COD_SALA, FECHA )
						 VALUES (@IDPelicula,
										 @IDSala,
										 CURRENT_TIMESTAMP
										)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		IF (@@TRANCOUNT = 0)
			SELECT 'Error Grabando Pelicula';
	END CATCH
END;
********************************************************************************************
create or alter function fxSinopsisPeli
( 
	@IdPeli int
)
	returns varchar(200)
as
BEGIN
	return (Select sinopsis From Peliculas where COD_PELICULA = @IdPeli);
END;
********************************************************************************************
-- PARA REPORTE
Select Sum(T.PRECIO) as TOTAL, Sum(TC.PRECIO) As 'Precio 2',
			 TC.COD_TIPO_CLIENTE
From Tickets T
left Join TIPOS_CLIENTES TC ON TC.COD_TIPO_CLIENTE = T.COD_TIPO_CLIENTE
Group by TC.COD_TIPO_CLIENTE
********************************************************************************************
create or alter procedure spUpdatePelicula 
( @IDPelicula int,
  @Nombre varchar(200), 
  @Sinopsis varchar(200),
  @Productora varchar(200),
  @Clasificacion int,
  @Subtitulada int,
  @Idioma int,
  @Genero int
)
AS
BEGIN
	BEGIN TRY
		BEGIN TRANSACTION 
			Update PELICULAS 
				 SET Nombre = @Nombre,
						 SINOPSIS = @Sinopsis,
						 PRODUCTORA = @Productora,
						 COD_CLASIFICACION_INCA = @Clasificacion,
						 SUBTITULADA = @Subtitulada,
						 COD_IDIOMA = @Idioma,
		         COD_GENERO = @Genero
			 WHERE COD_PELICULA = @IDPelicula;
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		if @@TRANCOUNT = 0
			Throw
	END CATCH
END;

